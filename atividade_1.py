# -*- coding: utf-8 -*-
"""code1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vp4Obgj0-4eWOKTe8-KUqBXfS32x13KJ
"""

!pip install graphviz

from graphviz import Digraph
from IPython.display import Image, display

class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def build_tree_from_postfix(postfix_tokens):
    stack = []
    for token in postfix_tokens:
        if token in '+-*/':
            right = stack.pop()
            left = stack.pop()
            node = Node(token)
            node.left = left
            node.right = right
            stack.append(node)
        else:
            stack.append(Node(token))
    return stack.pop()

def visualize_tree_colab(node):
    dot = Digraph()

    def add_nodes_edges(node):
        if node:
            dot.node(str(id(node)), str(node.value))
            if node.left:
                dot.edge(str(id(node)), str(id(node.left)))
                add_nodes_edges(node.left)
            if node.right:
                dot.edge(str(id(node)), str(id(node.right)))
                add_nodes_edges(node.right)

    add_nodes_edges(node)
    return dot

def infix_to_postfix(expression_tokens):
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    output = []
    stack = []

    for token in expression_tokens:
        if token.isdigit():
            output.append(token)
        elif token in precedence:
            while (stack and stack[-1] != '(' and
                   precedence.get(stack[-1], 0) >= precedence[token]):
                output.append(stack.pop())
            stack.append(token)
        elif token == '(':
            stack.append(token)
        elif token == ')':
            while stack and stack[-1] != '(':
                output.append(stack.pop())
            stack.pop()

    while stack:
        output.append(stack.pop())

    return output

# Express√£o fixa
fixed_expr = ['(', '(', '(', '7', '+', '3', ')', '*', '(', '5', '-', '2', ')', ')', '/', '(', '10', '*', '20', ')', ')']
postfix = infix_to_postfix(fixed_expr)
tree = build_tree_from_postfix(postfix)
dot = visualize_tree_colab(tree)
display(dot)

