# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YlznWXHtMnuf-lwLRCPhzKR_j2MXkpA7
"""

import random
from graphviz import Digraph
from IPython.display import display

# Definindo o nó da AVL
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1

# Classe da árvore AVL
class AVLTree:
    def insert(self, root, key):
        # Inserção normal de BST
        if not root:
            return Node(key)
        elif key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)

        # Atualizar altura
        root.height = 1 + max(self.get_height(root.left),
                              self.get_height(root.right))

        # Calcular fator de balanceamento
        balance = self.get_balance(root)

        # Aplicar rotações se necessário

        # Caso 1 - Rotação simples à direita
        if balance > 1 and key < root.left.key:
            return self.right_rotate(root)

        # Caso 2 - Rotação simples à esquerda
        if balance < -1 and key > root.right.key:
            return self.left_rotate(root)

        # Caso 3 - Rotação dupla à direita
        if balance > 1 and key > root.left.key:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)

        # Caso 4 - Rotação dupla à esquerda
        if balance < -1 and key < root.right.key:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)

        return root

    def left_rotate(self, z):
        y = z.right
        T2 = y.left

        y.left = z
        z.right = T2

        z.height = 1 + max(self.get_height(z.left),
                           self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left),
                           self.get_height(y.right))

        return y

    def right_rotate(self, z):
        y = z.left
        T3 = y.right

        y.right = z
        z.left = T3

        z.height = 1 + max(self.get_height(z.left),
                           self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left),
                           self.get_height(y.right))

        return y

    def get_height(self, node):
        if not node:
            return 0
        return node.height

    def get_balance(self, node):
        if not node:
            return 0
        return self.get_height(node.left) - self.get_height(node.right)

    # Visualização com Graphviz
    def visualize(self, root, title="AVL Tree"):
        dot = Digraph(comment=title)
        self._add_nodes_edges(dot, root)
        dot.render('/tmp/avl_tree', format='png', cleanup=True)
        display(dot)

    def _add_nodes_edges(self, dot, node):
        if not node:
            return

        dot.node(str(node.key), str(node.key))
        if node.left:
            dot.edge(str(node.key), str(node.left.key))
            self._add_nodes_edges(dot, node.left)
        if node.right:
            dot.edge(str(node.key), str(node.right.key))
            self._add_nodes_edges(dot, node.right)

# ========== DEMONSTRAÇÃO ==========

avl = AVLTree()

# --- Parte 1: Valores fixos [10, 20, 30] para rotação simples à esquerda
print("Inserção de [10, 20, 30] - Deve causar rotação simples à esquerda")
root = None
for val in [10, 20, 30]:
    root = avl.insert(root, val)
    avl.visualize(root, title=f"Após inserir {val}")

# --- Parte 2: Valores fixos [10, 30, 20] para rotação dupla à esquerda
print("Inserção de [10, 30, 20] - Deve causar rotação dupla à esquerda")
root = None
for val in [10, 30, 20]:
    root = avl.insert(root, val)
    avl.visualize(root, title=f"Após inserir {val}")

# --- Parte 3: Valores aleatórios
print("Inserção de 20 valores aleatórios")
random_values = random.sample(range(1, 100), 20)
print("Valores inseridos:", random_values)

root = None
for val in random_values:
    root = avl.insert(root, val)

avl.visualize(root, title="Árvore Final com 20 Valores Aleatórios")